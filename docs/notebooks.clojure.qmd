
---
format:
  html: {toc: true, toc-depth: 4, theme: cosmo, output-file: notebooks.clojure.html}
fontsize: 0.9em
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style><style>.clay-limit-image-width .clay-image {max-width: 100%}
</style>
<script src="notebooks.clojure_files/md-default0.js" type="text/javascript"></script><script src="notebooks.clojure_files/md-default1.js" type="text/javascript"></script>

::: {.sourceClojure}
```clojure
(ns notebooks.clojure
  (:require [tablecloth.api :as tc]
            [scicloj.noj.v1.vis.hanami :as hanami]
            [aerial.hanami.templates :as ht]
            [scicloj.kindly.v4.kind :as kind]))
```
:::



# Clojure

> Clojure is a dynamic, general-purpose programming language, combining the approachability and interactive development of a scripting language with an efficient and robust infrastructure for multithreaded programming.

[source](https://clojure.org/)


## Literals


::: {.sourceClojure}
```clojure
"I am a string"
```
:::



::: {.printedClojure}
```clojure
"I am a string"

```
:::


a regex

Numeric types


::: {.sourceClojure}
```clojure
51
```
:::



::: {.printedClojure}
```clojure
51

```
:::



::: {.sourceClojure}
```clojure
-1.5
```
:::



::: {.printedClojure}
```clojure
-1.5

```
:::



::: {.sourceClojure}
```clojure
1/4
```
:::



::: {.printedClojure}
```clojure
1/4

```
:::



## Symbols

A symbol is a reference to something else like a function, a value, a namespace, etc. Symbols can have a namespace, separated with a forward slash from the boolean values.

In a language like Ruby symbols are basically a frozen string, whereas in Cloure they are a reference to something else

Keywords on the other hand start leading with a colon and always evaluate themselves


::: {.sourceClojure}
```clojure
map
```
:::



::: {.printedClojure}
```clojure
#function[clojure.core/map]

```
:::



::: {.sourceClojure}
```clojure
+
```
:::



::: {.printedClojure}
```clojure
#function[clojure.core/+]

```
:::



::: {.sourceClojure}
```clojure
clojure.string/blank?
```
:::



::: {.printedClojure}
```clojure
#function[clojure.string/blank?]

```
:::



::: {.sourceClojure}
```clojure
nil
```
:::



::: {.printedClojure}
```clojure
nil

```
:::



::: {.sourceClojure}
```clojure
:alpha
```
:::



::: {.printedClojure}
```clojure
:alpha

```
:::



::: {.sourceClojure}
```clojure
:foo/bar
```
:::



::: {.printedClojure}
```clojure
:foo/bar

```
:::



## Collections

Clojure has 4 core collection types

list


vector


::: {.sourceClojure}
```clojure
[20 10 1960]
```
:::



::: {.printedClojure}
```clojure
[20 10 1960]

```
:::


set


::: {.sourceClojure}
```clojure
#{6 5 4 2 10}
```
:::



::: {.printedClojure}
```clojure
#{4 6 2 5 10}

```
:::


map


::: {.sourceClojure}
```clojure
{:a 1, :b 2}
```
:::



::: {.printedClojure}
```clojure
{:a 1, :b 2}

```
:::



## Delayed evaluation

Clojure offers delaying the evaluation of an expression
with the use of a quote before the expression




## REPL, explorations & interactive programming


## Functions


### Multi arity functions


### Rest/split functions


### `defn` vs `fn`


## Applying functions


### `apply`


## Locals & closures


### `let`


### `defn`


### Closures


## Java Interoperability


## Sequential collections


### Vectors


### Lists


## Hashed collections


### Sets


### Maps


### Representing domain data


## Flow control


### Statements vs expressions


### Flow control expressions


## Recursion


## Exceptions


## Namespaces


### Declaring namespaces


### Java classes and imports


```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: src/notebooks/clojure.clj</small></small></pre></div>
```
