[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science in Clojure",
    "section": "",
    "text": "(ns index\n  (:require [tablecloth.api :as tc]\n            [scicloj.noj.v1.vis.hanami :as hanami]\n            [aerial.hanami.templates :as ht]\n            [scicloj.kindly.v4.kind :as kind]))\n\n\n1 Clojure for data science\nWelcome! My name is Mario Gintili and this Quarto book is a self-documenting learning journey in the chasm of data science and machine learning.\nI have a background in software engineering with Ruby/Rails & Node.js.\nI was really impressed by the scicloj tech stack. It’s the toolset I’ll be using for this exploration.\nWithout further ado, here’s the syllabus that was kindly given to me by a colleague and fellow member of the community\n\nIntroduction to Data Science & Clojure\nIntro to Clojure syntax, data structures, functions\nSetting up Clojure development environment\nMath & Stats Fundamental\nProbability theory, distributions, hypothesis testing\nLinear algebra basics (vectors, matrices, operations)\nDescriptive statistics, exploratory data analysis\nExercises: Probability problems, basic data analysis\nData Manipulation with Clojure\nClojure sequences, collections, and data operations\nIntro to Clojure libs (tablecloth, hanami, fastmath, tech.ml.dataset)\nData cleaning, merging, reshaping datasets\nProject: Clean and wrangle a dataset\nData Visualization\nPrinciples of data visualization (Tufte, Wilkinson)\nUsing oz, Vega/Vega-Lite libs for plots in Clojure\nUsing plotly\nCreating common plots: Scatter, line, bar, histograms\nProject: Explore and visualize a dataset\nStatistical Models & Regression\nSimple/multiple linear regression\nModel fitting, evaluation metrics\nCase study: Predicting housing prices\nClassification\nLogistic regression, evaluation metrics\nDecision trees, random forests\nCase study: Spam classification\nFeature Engineering, Clustering & Dimensionality Reduction\nK-means clustering\nPrincipal Component Analysis (PCA)\nCase study: Customer segmentation\nDatabases & Big Data\nIntro to databases (SQL, NoSQL, graph)\nBig data concepts (MapReduce, Spark, Hadoop)\nProject: Analyze data from a database\nNatural Language Processing\nText data preprocessing\nTopic modeling, sentiment analysis\nProject: Analyze text data (reviews, tweets, stock market commentary, etc)\nTime Series & Forecasting\nTrend, seasonality, autocorrelation\nARIMA, exponential smoothing models\nCase study: Forecast product demand\nRecommendation Systems\nCollaborative filtering\nMatrix factorization techniques\nProject: Build a recommendation engine\nDeep Learning\nPytorch\nTensorflow\nMLOps\nMLFlow\nModern practises, storing and managing models, AWS sagemaker\nStable diffusion\nApplications & Final Project\nPutting it all together: End-to-end case studies\nIndividual final project on data science problem, maybe stock market\n\n\nsource: src/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clojure for data science</span>"
    ]
  },
  {
    "objectID": "notebooks.intro.html",
    "href": "notebooks.intro.html",
    "title": "2  Introduction | Clojure & Data Science",
    "section": "",
    "text": "2.1 Why Clojure?\nI started programming when I was about 14 years old, at the time I had gotten an internship at a startup which was building on Ruby/Rails. I told the CTO at the time that I wanted to learn too and he handed over the legendary Michael Hartl’s Ruby on Rails guide. I was stoked and completely failed at it, but I gained a bit of experience\nFast forward to 2014, I enrolled onto Makers Academy where I finished a Ruby/Rails bootcamp under the coaching of Evgeny Shadchnev, who in one of our sessions talked about LISP dialects and more specifically Clojure. There’s a ton of things that make Clojure awesome, here’s a few:\nThat being said, I would not say Clojure is a beginner friendly platform, it can very powerful once mastered but I suggest having prior programming experience before picking something like Clojure. A good way to explore a language’s suitability to your preference is to perform little code exercises. I personally like to use Codewars",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction | Clojure & Data Science</span>"
    ]
  },
  {
    "objectID": "notebooks.intro.html#why-clojure",
    "href": "notebooks.intro.html#why-clojure",
    "title": "2  Introduction | Clojure & Data Science",
    "section": "",
    "text": "Runs on the JVM so you can access a large ecosystem of libraries\nSupports Java interoperability out of the box\nDynamically typed\nFunctional",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction | Clojure & Data Science</span>"
    ]
  },
  {
    "objectID": "notebooks.intro.html#why-data-science",
    "href": "notebooks.intro.html#why-data-science",
    "title": "2  Introduction | Clojure & Data Science",
    "section": "2.2 Why data science?",
    "text": "2.2 Why data science?\nData is the new oil\nJust like Data science is an interdisciplinary field, there’s a few :key: reasons why I decided to go down this route\nIt sits close to software engineering. A lot of my skills as a software engineer do extrapolate, specially when it comes to data engineering, ops/cloud work, etc.\nA promise to a better work/life balance. Software engineers are often times pushed onto delivering new features as we predominantly worked on businesses funded by investment and not revenue. Over time I have come to terms with the fact that this is the nature of my industry. It does not mean that is healthy by any means. It has definitely improved in the recent years but with a hard recession in tech looming over, we are going to start seeing a lot of it coming back.\nBetter pay. Slightly contested, but it looks like salaries in machine learning & data science are about the same for software engineering without the pressure that comes with software engineering",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction | Clojure & Data Science</span>"
    ]
  },
  {
    "objectID": "notebooks.intro.html#methodology",
    "href": "notebooks.intro.html#methodology",
    "title": "2  Introduction | Clojure & Data Science",
    "section": "2.3 Methodology",
    "text": "2.3 Methodology\nHow am I writing this book? Well, I was inspired by a talk on London Clojurians where the scicloj stack was displayed, coming from a workflow where I have a terminal on one side of the screen and my text editor on the other one, and having to either navigate to the browser to check a server or make a staging deployment, I found this new approach super refreshing as it tightens the feedback loop one gets when writing programs. It works as follows:\n\nProvision a text editor with key bindings to an IDE that can run Clojure. I am using the corgi flavour of emacs & CIDER\nSetup a project that has data manipulation & visualisation libraries. I am using tablecloth, clay & kindly\nYou can now write code from your text editor and evaluate it in the editor itself to visualise and manipulate information, the same way you’d do with a Jupyter Notebook",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction | Clojure & Data Science</span>"
    ]
  },
  {
    "objectID": "notebooks.intro.html#demo",
    "href": "notebooks.intro.html#demo",
    "title": "2  Introduction | Clojure & Data Science",
    "section": "2.4 Demo",
    "text": "2.4 Demo\nThis file itself is a great demo of the stack. The markdown rendered text is actually code comments in a Clojure file and all Clojure code is evaluated and rendered onto the document itself\nHere’s an example dataset displaying passenger data from The Titanic\n\n(-&gt;\n (data/titanic-ds-split)\n :train\n (tc/dataset)\n (tc/head 10))\n\n\n_unnamed [10 12]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:passenger-id\n:survived\n:pclass\n:name\n:sex\n:age\n:sib-sp\n:parch\n:ticket\n:fare\n:cabin\n:embarked\n\n\n\n\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\n\nS\n\n\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Thayer)\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\n\nS\n\n\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\n\nS\n\n\n6\n0\n3\nMoran, Mr. James\nmale\n\n0\n0\n330877\n8.4583\n\nQ\n\n\n7\n0\n1\nMcCarthy, Mr. Timothy J\nmale\n54.0\n0\n0\n17463\n51.8625\nE46\nS\n\n\n8\n0\n3\nPalsson, Master. Gosta Leonard\nmale\n2.0\n3\n1\n349909\n21.0750\n\nS\n\n\n9\n1\n3\nJohnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)\nfemale\n27.0\n0\n2\n347742\n11.1333\n\nS\n\n\n10\n1\n2\nNasser, Mrs. Nicholas (Adele Achem)\nfemale\n14.0\n1\n0\n237736\n30.0708\n\nC\n\n\n\n\nAnd here’s a demo of visualising a chart using Plotly\n\n(def plotly-example\n  {:data [{:x [0 1 3 2]\n           :y [0 6 4 5]\n           :z [0 8 9 7]\n           :type :scatter3d\n           :mode :lines+markers\n           :opacity 0.5\n           :line {:width 5}\n           :marker {:size 4\n                    :colorscale :Viridis}}]\n   :layout {:title \"Plotly example\"}})\n\n\n(kind/plotly\n plotly-example)\n\n\n\nsource: src/notebooks/intro.clj",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction | Clojure & Data Science</span>"
    ]
  }
]